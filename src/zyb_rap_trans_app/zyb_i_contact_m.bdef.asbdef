managed implementation in class zbp_yb_i_cont_saver_m unique;
strict ( 2 );                                              //Check sntax of correctiness of statements
with draft;

define behavior for ZYB_I_CONTACT_M alias Contact
implementation in class zyb_cl_bp_contact_m unique
persistent table zyb_contact_m
lock master total etag LastChangedAt    //For Draft
draft table zyb_contact_d_m
with additional save    //used to capture change Logs or Send email with changes data in Create/UPdate/Delete and imlemnt in saver class
authorization master ( instance )
etag master LastChangedAt        //for Draft
{
  //create ( authorization : global );
  create ( authorization : global, precheck );     //Preheck method trigger on screen once passed data in field and used making mandatory in Create
  //update ( features : instance );  //"features : instance" Features Control used to Make Mandatory, Display only field/Button in Edit
  update ( precheck ); //Preheck method trigger on screen once passed data in field and used making mandatory in Update
  delete;
  field ( readonly, numbering : managed ) ContactId;    //numbering : managed will Create automaticaly by Framework but need TYpe of SYSUUD_16 in table
  association _Address { create; with draft; }    //Child Create Address allowed only in Parent Behavior
  association _Attachment { create; with draft; }    //Child Create Address allowed only in Parent Behavior

  // Feature control on field and code nneed to do in zyb_cl_bp_contact_m->get_instance_features class method to make enable/Disable
  field ( features : instance ) FirstName, MiddleName, LastName;


  //Bevavior Characteristic
  field ( readonly ) Age;      //Make Age field Read only, not allow to edit
  //field ( mandatory : create ) FirstName;   //Make first name mandatory while creating new entry

  //Actions
  action setStatus result [1] $self;   // Action Name-SetStatus, Return single entry-result[1] and same Entity-$self
  factory action copyContact [1];
  static factory action createContact [1];

  //Draft Actions
  draft action Activate optimized;
  draft action Edit;
  draft action Resume;
  draft action Discard;
  draft determine action Prepare
  { validation validateTel;   //validation validateTel; validation validateName; this need to add to tigger validation in Draft functionality otherwise it will not trihgger it
    validation validateName;
    validation Address~validateAddress; //Child Validation need to include to work in Draft mode
  }
  //Determination
  determination calculateAge on modify { create; field Dob; }

  //Validation
  validation validateEntry on save { create; update; }
  validation validateDob on save { field Dob; create; }
  validation validateTel on save { create; update; }
  validation validateName on save { create; update; }

 //Side Effects
 determine action validateFirstName{ validation validateName; }
 determine action validateLastName{ validation validateName; }
 determine action validateTelephone{ validation validateTel; }
 side effects {
	field Dob affects field Age;
	determine action validateFirstName executed on field FirstName affects messages;
	determine action validateLastName executed on field LastName affects messages;
	determine action validateTelephone executed on field Telephone affects messages;
}




  mapping for zyb_contact_m //mapping table field and view field
    {
      ContactId     = contact_id;
      FirstName     = first_name;
      MiddleName    = middle_name;
      LastName      = last_name;
      Gender        = Gender;
      Dob           = Dob;
      Age           = Age;
      Telephone     = Telephone;
      Email         = Email;
      Active        = active;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}



define behavior for ZYB_I_CONTADDR_M alias Address
implementation in class zyb_cl_bp_address_m unique
persistent table zyb_contaddr_m
draft table zyb_contaddr_d_m
lock dependent by _Contact                  //Parent Entity
authorization dependent by _Contact         //Parent Entity
//etag master <field_name>
{
  update;
  delete;

  association _Contact { with draft; }   //Parent entity association

  field ( readonly ) ContactId;
  field ( readonly, numbering : managed ) AddressId;    //numbering : managed will Create automaticaly by Framework but need TYpe of SYSUUD_16 in table
  //Bevavior Characteristic
  //field ( mandatory : create ) City;   //Make City mandatory while creating new entry

  //Actions


  //Determination


  //Validation
  validation validateAddress on save { create; update; }

  mapping for zyb_contaddr_m //mapping table field and view field
    {
      ContactId     = contact_id;
      AddressId     = address_id;
      Addr1         = Addr1;
      Addr2         = Addr2;
      City          = City;
      State         = state;
      Pincode       = pincode;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}



/// Behavir Def for Attachment
define behavior for ZYB_I_CONTATT_M alias Attachments
implementation in class zyb_cl_bp_attachment_m unique
persistent table zyb_contatt_m
draft table zyb_contatt_d_m
lock dependent by _Contact                  //Parent Entity
authorization dependent by _Contact         //Parent Entity
//etag master <field_name>
{
  update;
  delete;

  association _Contact { with draft; }   //Parent entity association

  field ( readonly ) ContactId;
  field ( readonly, numbering : managed ) AttachId;    //numbering : managed will Create automaticaly by Framework but need TYpe of SYSUUD_16 in table
  //Bevavior Characteristic

  //Actions

  //Determination

  //Validation

  mapping for zyb_contatt_m //mapping table field and view field
    {
      ContactId     = contact_id;
      AttachId      = attach_id;
      Comments      = Comments;
      Attachment    = Attachment;
      Mimetype      = Mimetype;
      Filename      = filename;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}